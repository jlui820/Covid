/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/circle.js":
/*!***********************!*\
  !*** ./src/circle.js ***!
  \***********************/
/*! exports provided: circle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "circle", function() { return circle; });
var circle = function circle() {
  var margin = {
    left: 100,
    right: 50,
    top: 10,
    bottom: 130
  };
  var width = 1600 - margin.left - margin.right,
      height = 800 - margin.top - margin.bottom;
  var flag = true;
  var t = d3.transition().duration(1000);
  var g = d3.select("#circle").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + ", " + margin.top + ")");
  var xAxisGroup = g.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")");
  var yAxisGroup = g.append("g").attr("class", "y axis");
  var x = d3.scaleBand().range([0, width]).padding(0.4);
  var y = d3.scaleLinear().range([height, 0]);
  g.append("text").attr("y", height + 120).attr("x", width / 2).attr("font-size", "30px").attr("text-anchor", "middle").attr("fill", "white").text("States");
  var yLabel = g.append("text").attr("y", -60).attr("x", -(height / 2)).attr("font-size", "30px").attr("text-anchor", "middle").attr("transform", "rotate(-90)").attr("fill", "white").text("Cases");
  d3.json('https://corona.lmao.ninja/v2/states/').then(function (data) {
    data.forEach(function (d) {
      d.cases;
      d.state;
      d.deaths;
      d.todayCases;
      d.todayDeaths;
    });
    d3.interval(function () {
      update(data);
      flag = !flag;
    }, 2000);
    update(data);
  });

  var update = function update(data) {
    var value = flag ? "todayCases" : "todayDeaths";
    x.domain(data.map(function (d) {
      return d.state;
    }));
    y.domain([0, d3.max(data, function (d) {
      return d[value];
    })]);
    var xAxisCall = d3.axisBottom(x);
    g.append("g").attr("class", "x axis").attr("transform", "translate(0, " + height + ")").call(xAxisCall).selectAll("text").attr("y", "10").attr("x", "-5").attr("font-size", "13px").attr("text-anchor", "end").attr("transform", "rotate(-40)"); //.transition(t).call(xAxisCall)

    var yAxisCall = d3.axisLeft(y).tickFormat(function (d) {
      return d;
    });
    yAxisGroup.transition(t).call(yAxisCall);
    var rects = g.selectAll("circle").data(data);
    rects.exit().attr('fill', 'blue').transition(t).attr('cy', y(0)).remove();
    rects.enter().append("circle").attr("fill", "white").attr('cy', y(0)).attr("cx", function (d) {
      return x(d.state) + x.bandwidth() / 2;
    }).attr("r", 7).merge(rects).transition(t).attr("cx", function (d) {
      return x(d.state) + +x.bandwidth() / 2;
    }).attr("cy", function (d) {
      return y(d[value]);
    });
    var label = flag ? "Today Cases" : "Today Deaths";
    yLabel.text(label);
  };
};

/***/ }),

/***/ "./src/graph.js":
/*!**********************!*\
  !*** ./src/graph.js ***!
  \**********************/
/*! exports provided: graph */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "graph", function() { return graph; });
var graph = function graph() {
  var margin = {
    left: 100,
    right: 50,
    top: 10,
    bottom: 130
  };
  var width = 1600 - margin.left - margin.right,
      height = 800 - margin.top - margin.bottom;
  var flag = true;
  var t = d3.transition().duration(1000);
  var g = d3.select("#graph").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + ", " + margin.top + ")");
  var xAxisGroup = g.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")");
  var yAxisGroup = g.append("g").attr("class", "y axis");
  var x = d3.scaleBand().range([0, width]).padding(0.4);
  var y = d3.scaleLinear().range([height, 0]);
  g.append("text").attr("y", height + 120).attr("x", width / 2).attr("font-size", "30px").attr("text-anchor", "middle").attr("fill", "white").text("States");
  var yLabel = g.append("text").attr("y", -60).attr("x", -(height / 2)).attr("font-size", "30px").attr("text-anchor", "middle").attr("transform", "rotate(-90)").attr("fill", "white").text("Cases");
  d3.json('https://corona.lmao.ninja/v2/states').then(function (data) {
    data.forEach(function (d) {
      d.cases;
      d.state;
      d.deaths;
    });
    d3.interval(function () {
      update(data);
      flag = !flag;
    }, 2000);
    update(data);
  });

  var update = function update(data) {
    var value = flag ? "cases" : "deaths";
    x.domain(data.map(function (d) {
      return d.state;
    }));
    y.domain([0, d3.max(data, function (d) {
      return d[value];
    })]);
    var xAxisCall = d3.axisBottom(x);
    g.append("g").attr("class", "x axis").attr("transform", "translate(0, " + height + ")").call(xAxisCall).selectAll("text").attr("y", "10").attr("x", "-5").attr("font-size", "13px").attr("text-anchor", "end").attr("transform", "rotate(-40)");
    var yAxisCall = d3.axisLeft(y).tickFormat(function (d) {
      return d;
    });
    yAxisGroup.transition(t).call(yAxisCall);
    var rects = g.selectAll("rect").data(data);
    rects.exit().attr('fill', 'blue').transition(t).attr('y', y(0)).attr('height', 0).remove();
    rects.enter().append("rect").attr("fill", "white").attr('y', y(0)).attr('height', 0).attr("x", function (d) {
      return x(d.state);
    }).attr("width", x.bandwidth).merge(rects).transition(t).attr("x", function (d) {
      return x(d.state);
    }).attr("width", x.bandwidth).attr("y", function (d) {
      return y(d[value]);
    }).attr("height", function (d) {
      return height - y(d[value]);
    });
    var label = flag ? "Cases" : "Deaths";
    yLabel.text(label);
  };
};

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./graph */ "./src/graph.js");
/* harmony import */ var _circle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./circle */ "./src/circle.js");

 // import { line } from './line'

document.addEventListener("DOMContentLoaded", function () {
  Object(_graph__WEBPACK_IMPORTED_MODULE_0__["graph"])();
  Object(_circle__WEBPACK_IMPORTED_MODULE_1__["circle"])(); // line();
});

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ3JhcGguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImNpcmNsZSIsIm1hcmdpbiIsImxlZnQiLCJyaWdodCIsInRvcCIsImJvdHRvbSIsIndpZHRoIiwiaGVpZ2h0IiwiZmxhZyIsInQiLCJkMyIsInRyYW5zaXRpb24iLCJkdXJhdGlvbiIsImciLCJzZWxlY3QiLCJhcHBlbmQiLCJhdHRyIiwieEF4aXNHcm91cCIsInlBeGlzR3JvdXAiLCJ4Iiwic2NhbGVCYW5kIiwicmFuZ2UiLCJwYWRkaW5nIiwieSIsInNjYWxlTGluZWFyIiwidGV4dCIsInlMYWJlbCIsImpzb24iLCJ0aGVuIiwiZGF0YSIsImZvckVhY2giLCJkIiwiY2FzZXMiLCJzdGF0ZSIsImRlYXRocyIsInRvZGF5Q2FzZXMiLCJ0b2RheURlYXRocyIsImludGVydmFsIiwidXBkYXRlIiwidmFsdWUiLCJkb21haW4iLCJtYXAiLCJtYXgiLCJ4QXhpc0NhbGwiLCJheGlzQm90dG9tIiwiY2FsbCIsInNlbGVjdEFsbCIsInlBeGlzQ2FsbCIsImF4aXNMZWZ0IiwidGlja0Zvcm1hdCIsInJlY3RzIiwiZXhpdCIsInJlbW92ZSIsImVudGVyIiwiYmFuZHdpZHRoIiwibWVyZ2UiLCJsYWJlbCIsImdyYXBoIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiO1FBQUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7OztRQUdBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwwQ0FBMEMsZ0NBQWdDO1FBQzFFO1FBQ0E7O1FBRUE7UUFDQTtRQUNB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LENBQUNRLEtBQUQsQ0FBRixDQUFqQjtBQUE2QixLQWJsRTtBQWVBLFFBQUlpQixLQUFLLEdBQUdoRCxJQUFJLEdBQUcsT0FBSCxHQUFhLFFBQTdCO0FBQ0FrQixVQUFNLENBQUNELElBQVAsQ0FBWStCLEtBQVo7QUFFSCxHQXZERztBQXdEUCxDQXpITSxDOzs7Ozs7Ozs7Ozs7QUNBUDtBQUFBO0FBQUE7QUFBQTtDQUVBOztBQUVBRSxRQUFRLENBQUNDLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxZQUFNO0FBQ2hERixzREFBSztBQUNMekQsd0RBQU0sR0FGMEMsQ0FHaEQ7QUFDSCxDQUpELEUiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9zcmMvaW5kZXguanNcIik7XG4iLCJcbmV4cG9ydCBjb25zdCBjaXJjbGUgPSAoKSA9PiB7XG5cbiAgICBsZXQgbWFyZ2luID0ge2xlZnQ6IDEwMCwgcmlnaHQ6IDUwLCB0b3A6IDEwLCBib3R0b206IDEzMH07XG5cbiAgICBsZXQgd2lkdGggPSAxNjAwIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQsXG4gICAgICAgIGhlaWdodCA9IDgwMCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuXG4gICAgbGV0IGZsYWcgPSB0cnVlO1xuXG4gICAgbGV0IHQgPSBkMy50cmFuc2l0aW9uKCkuZHVyYXRpb24oMTAwMCk7XG5cbiAgICBsZXQgZyA9IGQzLnNlbGVjdChcIiNjaXJjbGVcIilcbiAgICAgICAgLmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoICsgbWFyZ2luLmxlZnQgKyBtYXJnaW4ucmlnaHQpXG4gICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCArIG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tKVxuICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsIFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKTtcblxuICAgIGxldCB4QXhpc0dyb3VwID0gZy5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ4IGF4aXNcIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIGhlaWdodCArIFwiKVwiKTtcblxuICAgIGxldCB5QXhpc0dyb3VwID0gZy5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ5IGF4aXNcIik7XG5cbiAgICBsZXQgeCA9IGQzLnNjYWxlQmFuZCgpXG4gICAgICAgIC5yYW5nZShbMCwgd2lkdGhdKVxuICAgICAgICAucGFkZGluZygwLjQpO1xuXG4gICAgbGV0IHkgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSk7XG5cbiAgICBnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJ5XCIsIGhlaWdodCArIDEyMClcbiAgICAgICAgLmF0dHIoXCJ4XCIsIHdpZHRoIC8gMilcbiAgICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgXCIzMHB4XCIpXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwid2hpdGVcIilcbiAgICAgICAgLnRleHQoXCJTdGF0ZXNcIik7XG5cbiAgICBsZXQgeUxhYmVsID0gZy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgIC5hdHRyKFwieVwiLCAtNjApXG4gICAgICAgIC5hdHRyKFwieFwiLCAtKGhlaWdodCAvIDIpKVxuICAgICAgICAuYXR0cihcImZvbnQtc2l6ZVwiLCBcIjMwcHhcIilcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgtOTApXCIpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIndoaXRlXCIpXG4gICAgICAgIC50ZXh0KFwiQ2FzZXNcIik7IFxuICAgICAgICAgICAgXG4gICAgZDMuanNvbignaHR0cHM6Ly9jb3JvbmEubG1hby5uaW5qYS92Mi9zdGF0ZXMvJykudGhlbihkYXRhID0+IHtcbiAgICAgICAgXG4gICAgICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBkLmNhc2VzO1xuICAgICAgICAgICAgICAgICAgICBkLnN0YXRlO1xuICAgICAgICAgICAgICAgICAgICBkLmRlYXRoc1xuICAgICAgICAgICAgICAgICAgICBkLnRvZGF5Q2FzZXNcbiAgICAgICAgICAgICAgICAgICAgZC50b2RheURlYXRoc1xuICAgICAgICAgICAgICAgIH0pXG5cblxuICAgICAgICBkMy5pbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICB1cGRhdGUoZGF0YSlcbiAgICAgICAgICAgIGZsYWcgPSAhZmxhZ1xuICAgICAgICB9LCAyMDAwKTtcbiAgICAgICAgdXBkYXRlKGRhdGEpO1xuICAgIH0pO1xuXG4gICAgbGV0IHVwZGF0ZSA9IChkYXRhKSA9PiB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGZsYWcgPyBcInRvZGF5Q2FzZXNcIiA6IFwidG9kYXlEZWF0aHNcIjtcblxuICAgICAgICB4LmRvbWFpbihkYXRhLm1hcCggKGQpID0+IHsgcmV0dXJuIGQuc3RhdGUgfSkpO1xuXG4gICAgICAgIHkuZG9tYWluKFswLCBkMy5tYXgoZGF0YSwgIChkKSA9PiB7IHJldHVybiBkW3ZhbHVlXX0pXSlcblxuICAgICAgICBsZXQgeEF4aXNDYWxsID0gZDMuYXhpc0JvdHRvbSh4KTtcbiAgICAgICAgZy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwieCBheGlzXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLCBcIiArIGhlaWdodCArIFwiKVwiKVxuICAgICAgICAgICAgLmNhbGwoeEF4aXNDYWxsKVxuICAgICAgICAgICAgLnNlbGVjdEFsbChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwieVwiLCBcIjEwXCIpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgXCItNVwiKVxuICAgICAgICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgXCIxM3B4XCIpXG4gICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwiZW5kXCIpXG4gICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgtNDApXCIpO1xuXG4gICAgICAgICAgICAvLy50cmFuc2l0aW9uKHQpLmNhbGwoeEF4aXNDYWxsKVxuXG4gICAgICAgIGxldCB5QXhpc0NhbGwgPSBkMy5heGlzTGVmdCh5KVxuICAgICAgICAgICAgLnRpY2tGb3JtYXQoIChkKSA9PiB7cmV0dXJuIGQ7fSk7XG4gICAgICAgIHlBeGlzR3JvdXAudHJhbnNpdGlvbih0KS5jYWxsKHlBeGlzQ2FsbCk7XG5cbiAgICAgICAgbGV0IHJlY3RzID0gZy5zZWxlY3RBbGwoXCJjaXJjbGVcIilcbiAgICAgICAgICAgIC5kYXRhKGRhdGEpO1xuXG4gICAgICAgIHJlY3RzLmV4aXQoKVxuICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnYmx1ZScpXG4gICAgICAgIC50cmFuc2l0aW9uKHQpXG4gICAgICAgICAgICAuYXR0cignY3knLCB5KDApKVxuICAgICAgICAgICAgLnJlbW92ZSgpO1xuXG4gICAgICAgIHJlY3RzLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImZpbGxcIiwgXCJ3aGl0ZVwiKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdjeScsIHkoMCkpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCAoZCkgPT4geyByZXR1cm4geChkLnN0YXRlKSArIHguYmFuZHdpZHRoKCkgLyAyIH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJyXCIsIDcpXG5cbiAgICAgICAgICAgICAgICAubWVyZ2UocmVjdHMpXG4gICAgICAgICAgICAgICAgLnRyYW5zaXRpb24odClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCAoZCkgPT4geyByZXR1cm4geChkLnN0YXRlKSArICsgeC5iYW5kd2lkdGgoKSAvIDIgfSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCAoZCkgPT4geyByZXR1cm4geShkW3ZhbHVlXSk7IH0pXG4gICAgICAgICAgICAgXG4gICAgICAgIGxldCBsYWJlbCA9IGZsYWcgPyBcIlRvZGF5IENhc2VzXCIgOiBcIlRvZGF5IERlYXRoc1wiO1xuICAgICAgICB5TGFiZWwudGV4dChsYWJlbCk7XG5cbiAgICB9XG4gICAgXG59OyIsImV4cG9ydCBjb25zdCBncmFwaCA9ICgpID0+IHtcblxuICAgIGxldCBtYXJnaW4gPSB7bGVmdDogMTAwLCByaWdodDogNTAsIHRvcDogMTAsIGJvdHRvbTogMTMwfTtcblxuICAgIGxldCB3aWR0aCA9IDE2MDAgLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodCxcbiAgICAgICAgaGVpZ2h0ID0gODAwIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG5cbiAgICBsZXQgZmxhZyA9IHRydWU7XG5cbiAgICBsZXQgdCA9IGQzLnRyYW5zaXRpb24oKS5kdXJhdGlvbigxMDAwKTtcblxuICAgIGxldCBnID0gZDMuc2VsZWN0KFwiI2dyYXBoXCIpXG4gICAgICAgIC5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aCArIG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KVxuICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQgKyBtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbSlcbiAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLCBcIiArIG1hcmdpbi50b3AgKyBcIilcIik7XG5cbiAgICBsZXQgeEF4aXNHcm91cCA9IGcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwieCBheGlzXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsXCIgKyBoZWlnaHQgKyBcIilcIik7XG5cbiAgICBsZXQgeUF4aXNHcm91cCA9IGcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwieSBheGlzXCIpO1xuXG4gICAgbGV0IHggPSBkMy5zY2FsZUJhbmQoKVxuICAgICAgICAucmFuZ2UoWzAsIHdpZHRoXSlcbiAgICAgICAgLnBhZGRpbmcoMC40KTtcblxuXG4gICAgbGV0IHkgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSk7XG5cbiAgICBnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJ5XCIsIGhlaWdodCArIDEyMClcbiAgICAgICAgLmF0dHIoXCJ4XCIsIHdpZHRoIC8gMilcbiAgICAgICAgLmF0dHIoXCJmb250LXNpemVcIiwgXCIzMHB4XCIpXG4gICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwid2hpdGVcIilcbiAgICAgICAgLnRleHQoXCJTdGF0ZXNcIik7XG5cbiAgICBsZXQgeUxhYmVsID0gZy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgIC5hdHRyKFwieVwiLCAtNjApXG4gICAgICAgIC5hdHRyKFwieFwiLCAtKGhlaWdodCAvIDIpKVxuICAgICAgICAuYXR0cihcImZvbnQtc2l6ZVwiLCBcIjMwcHhcIilcbiAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgtOTApXCIpXG4gICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIndoaXRlXCIpXG4gICAgICAgIC50ZXh0KFwiQ2FzZXNcIik7XG4gICAgICAgIFxuXG4gICAgICAgIGQzLmpzb24oJ2h0dHBzOi8vY29yb25hLmxtYW8ubmluamEvdjIvc3RhdGVzJykudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZC5jYXNlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGQuc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkLmRlYXRoc1xuICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBkMy5pbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdXBkYXRlKGRhdGEpXG4gICAgICAgICAgICAgICAgZmxhZyA9ICFmbGFnXG4gICAgICAgICAgICB9LCAyMDAwKTtcbiAgICAgICAgICAgIHVwZGF0ZShkYXRhKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IHVwZGF0ZSA9IChkYXRhKSA9PiB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGZsYWcgPyBcImNhc2VzXCIgOiBcImRlYXRoc1wiO1xuXG4gICAgICAgIHguZG9tYWluKGRhdGEubWFwKCAoZCkgPT4geyByZXR1cm4gZC5zdGF0ZSB9KSk7XG5cbiAgICAgICAgeS5kb21haW4oWzAsIGQzLm1heChkYXRhLCAgKGQpID0+IHsgcmV0dXJuIGRbdmFsdWVdfSldKVxuXG5cbiAgICAgICAgbGV0IHhBeGlzQ2FsbCA9IGQzLmF4aXNCb3R0b20oeCk7XG4gICAgICAgIGcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInggYXhpc1wiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCwgXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgICAgIC5jYWxsKHhBeGlzQ2FsbClcbiAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgXCIxMFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIFwiLTVcIilcbiAgICAgICAgICAgIC5hdHRyKFwiZm9udC1zaXplXCIsIFwiMTNweFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcImVuZFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoLTQwKVwiKTtcblxuICAgICAgICAgICAgXG4gICAgICAgIGxldCB5QXhpc0NhbGwgPSBkMy5heGlzTGVmdCh5KVxuICAgICAgICAgICAgLnRpY2tGb3JtYXQoIChkKSA9PiB7cmV0dXJuIGQ7fSk7XG4gICAgICAgIHlBeGlzR3JvdXAudHJhbnNpdGlvbih0KS5jYWxsKHlBeGlzQ2FsbCk7XG5cblxuICAgICAgICBsZXQgcmVjdHMgPSBnLnNlbGVjdEFsbChcInJlY3RcIilcbiAgICAgICAgICAgIC5kYXRhKGRhdGEpO1xuXG4gICBcbiAgICAgICAgcmVjdHMuZXhpdCgpXG4gICAgICAgICAgICAuYXR0cignZmlsbCcsICdibHVlJylcbiAgICAgICAgLnRyYW5zaXRpb24odClcbiAgICAgICAgICAgIC5hdHRyKCd5JywgeSgwKSlcbiAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCAwKVxuICAgICAgICAgICAgLnJlbW92ZSgpO1xuXG4gICAgICAgIHJlY3RzLmVudGVyKClcbiAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIFwid2hpdGVcIilcbiAgICAgICAgICAgICAgICAuYXR0cigneScsIHkoMCkpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIDApXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIChkKSA9PiB7IHJldHVybiB4KGQuc3RhdGUpfSlcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHguYmFuZHdpZHRoKVxuXG4gICAgICAgICAgICAgICAgLm1lcmdlKHJlY3RzKVxuICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKHQpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCAoZCkgPT4geyByZXR1cm4geChkLnN0YXRlKX0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgeC5iYW5kd2lkdGgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCAoZCkgPT4geyByZXR1cm4geShkW3ZhbHVlXSk7IH0pXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsICAoZCkgPT4ge3JldHVybiBoZWlnaHQgLSB5KGRbdmFsdWVdKTt9KVxuXG4gICAgICAgIGxldCBsYWJlbCA9IGZsYWcgPyBcIkNhc2VzXCIgOiBcIkRlYXRoc1wiO1xuICAgICAgICB5TGFiZWwudGV4dChsYWJlbCk7XG5cbiAgICB9XG59OyIsImltcG9ydCB7IGdyYXBoIH0gZnJvbSAnLi9ncmFwaCc7XG5pbXBvcnQgeyBjaXJjbGUgfSBmcm9tICcuL2NpcmNsZSc7XG4vLyBpbXBvcnQgeyBsaW5lIH0gZnJvbSAnLi9saW5lJ1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XG4gICAgZ3JhcGgoKTtcbiAgICBjaXJjbGUoKTtcbiAgICAvLyBsaW5lKCk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=