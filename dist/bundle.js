/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/circle.js":
/*!***********************!*\
  !*** ./src/circle.js ***!
  \***********************/
/*! exports provided: circle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "circle", function() { return circle; });
var circle = function circle() {
  var margin = {
    left: 100,
    right: 50,
    top: 10,
    bottom: 130
  };
  var width = 1600 - margin.left - margin.right,
      height = 800 - margin.top - margin.bottom;
  var flag = true;
  var t = d3.transition().duration(1000);
  var g = d3.select("#circle").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + ", " + margin.top + ")");
  var xAxisGroup = g.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")");
  var yAxisGroup = g.append("g").attr("class", "y axis"); // X Scale

  var x = d3.scaleBand().range([0, width]).padding(0.4); // Y Scale

  var y = d3.scaleLinear().range([height, 0]); // X Label 

  g.append("text").attr("y", height + 120).attr("x", width / 2).attr("font-size", "30px").attr("text-anchor", "middle").attr("fill", "white").text("States"); // Y Label

  var yLabel = g.append("text").attr("y", -60).attr("x", -(height / 2)).attr("font-size", "30px").attr("text-anchor", "middle").attr("transform", "rotate(-90)").attr("fill", "white").text("Cases");
  d3.json('https://corona.lmao.ninja/states').then(function (data) {
    data.forEach(function (d) {
      d.cases;
      d.state;
      d.deaths;
      d.todayCases;
      d.todayDeaths;
    });
    d3.interval(function () {
      update(data);
      flag = !flag;
    }, 2000);
    update(data);
  });

  function update(data) {
    var value = flag ? "todayCases" : "todayDeaths";
    x.domain(data.map(function (d) {
      return d.state;
    }));
    y.domain([0, d3.max(data, function (d) {
      return d[value];
    })]); // X Axis

    var xAxisCall = d3.axisBottom(x);
    g.append("g").attr("class", "x axis").attr("transform", "translate(0, " + height + ")").transition(t).call(xAxisCall).selectAll("text").attr("y", "10").attr("x", "-5").attr("font-size", "13px").attr("text-anchor", "end").attr("transform", "rotate(-40)"); // Y Axis

    var yAxisCall = d3.axisLeft(y).tickFormat(function (d) {
      return d;
    });
    yAxisGroup.transition(t).call(yAxisCall); // JOIN new data with old elements.

    var rects = g.selectAll("circle").data(data); // EXIT old elements not present in new data.

    rects.exit().attr('fill', 'blue').transition(t).attr('cy', y(0)).remove(); // ENTER new elements present in new data.

    rects.enter().append("circle").attr("fill", "white").attr('cy', y(0)).attr("cx", function (d) {
      return x(d.state) + x.bandwidth() / 2;
    }).attr("r", 5).merge(rects).transition(t).attr("cx", function (d) {
      return x(d.state) + +x.bandwidth() / 2;
    }).attr("cy", function (d) {
      return y(d[value]);
    });
    var label = flag ? "Today Cases" : "Today Deaths";
    yLabel.text(label);
  }
};

/***/ }),

/***/ "./src/graph.js":
/*!**********************!*\
  !*** ./src/graph.js ***!
  \**********************/
/*! exports provided: graph */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "graph", function() { return graph; });
var graph = function graph() {
  var margin = {
    left: 100,
    right: 50,
    top: 10,
    bottom: 130
  };
  var width = 1600 - margin.left - margin.right,
      height = 800 - margin.top - margin.bottom;
  var flag = true;
  var t = d3.transition().duration(1000);
  var g = d3.select("#graph").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + ", " + margin.top + ")");
  var xAxisGroup = g.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")");
  var yAxisGroup = g.append("g").attr("class", "y axis"); // X Scale

  var x = d3.scaleBand().range([0, width]).padding(0.4); // Y Scale

  var y = d3.scaleLinear().range([height, 0]); // X Label 

  g.append("text").attr("y", height + 120).attr("x", width / 2).attr("font-size", "30px").attr("text-anchor", "middle").attr("fill", "white").text("States"); // Y Label

  var yLabel = g.append("text").attr("y", -60).attr("x", -(height / 2)).attr("font-size", "30px").attr("text-anchor", "middle").attr("transform", "rotate(-90)").attr("fill", "white").text("Cases");
  d3.json('https://corona.lmao.ninja/states').then(function (data) {
    data.forEach(function (d) {
      d.cases;
      d.state;
      d.deaths;
    });
    d3.interval(function () {
      update(data);
      flag = !flag;
    }, 2000);
    update(data);
  });

  function update(data) {
    var value = flag ? "cases" : "deaths";
    x.domain(data.map(function (d) {
      return d.state;
    }));
    y.domain([0, d3.max(data, function (d) {
      return d[value];
    })]); // X Axis

    var xAxisCall = d3.axisBottom(x);
    g.append("g").attr("class", "x axis").attr("transform", "translate(0, " + height + ")").transition(t).call(xAxisCall).selectAll("text").attr("y", "10").attr("x", "-5").attr("font-size", "13px").attr("text-anchor", "end").attr("transform", "rotate(-40)"); // Y Axis

    var yAxisCall = d3.axisLeft(y).tickFormat(function (d) {
      return d;
    });
    yAxisGroup.transition(t).call(yAxisCall); // JOIN new data with old elements.

    var rects = g.selectAll("rect").data(data); // EXIT old elements not present in new data.

    rects.exit().attr('fill', 'blue').transition(t).attr('y', y(0)).attr('height', 0).remove();
    rects.enter().append("rect").attr("fill", "white").attr('y', y(0)).attr('height', 0).attr("x", function (d) {
      return x(d.state);
    }).attr("width", x.bandwidth).merge(rects).transition(t).attr("x", function (d) {
      return x(d.state);
    }).attr("width", x.bandwidth).attr("y", function (d) {
      return y(d[value]);
    }).attr("height", function (d) {
      return height - y(d[value]);
    });
    var label = flag ? "Cases" : "Deaths";
    yLabel.text(label);
  }
};

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./graph */ "./src/graph.js");
/* harmony import */ var _circle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./circle */ "./src/circle.js");
// put charts in here?


document.addEventListener("DOMContentLoaded", function () {
  Object(_graph__WEBPACK_IMPORTED_MODULE_0__["graph"])();
  Object(_circle__WEBPACK_IMPORTED_MODULE_1__["circle"])();
});

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,